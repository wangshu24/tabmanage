#!/bin/sh
# pre-push hook
# Blocks console.(log|warn|error) unless guarded by isDev
# Ignores env file where isDevBuild() is defined
# Supports single- and multi-line console calls
# Tracks execution time
# Optimized: only checks staged files being pushed

START_TIME=$(date +%s%N)

IGNORE_FILE="scripts/shared/devTool.js"

# Determine JS files that will be pushed by reading refs from stdin
# For each ref update, diff remote_sha..local_sha to list changed files
read_updates=0
FILES=$(\
  while read -r local_ref local_sha remote_ref remote_sha; do
    read_updates=1
    # Skip deletes
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
      continue
    fi
    # If new branch/tag, compare against empty tree; else against remote sha
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
      range="$local_sha"
    else
      range="$remote_sha..$local_sha"
    fi
    git diff --name-only --diff-filter=ACM $range
  done < /dev/stdin | grep '\.js$' | grep -v "$IGNORE_FILE" | sort -u
)

# If no JS files in the push, skip quickly
[ -z "$FILES" ] && {
  echo "✅ No JS changes to check in this push. Push allowed."
  exit 0
}

invalid_logs=""

for file in $FILES; do
    lineno=0
    inside_isDev_block=0
    block_depth=0
    inside_console_log=0
    console_buffer=""
    console_start_line=0

    # Read STAGED content (fallback to working tree if not in index)
    tmpfile=$(mktemp)
    if git cat-file -e ":$file" 2>/dev/null; then
        git show ":$file" > "$tmpfile" 2>/dev/null || true
    else
        [ -f "$file" ] && cp "$file" "$tmpfile" 2>/dev/null || true
    fi

    while IFS= read -r line || [ -n "$line" ]; do
        lineno=$((lineno+1))
        trimmed="${line#"${line%%[![:space:]]*}"}"  # trim leading whitespace

        # Update block depth for { } tracking
        opens=$(awk -F"{" '{print NF-1}' <<< "$line")
        closes=$(awk -F"}" '{print NF-1}' <<< "$line")
        block_depth=$((block_depth + opens - closes))
        [ $block_depth -le 0 ] && inside_isDev_block=0

        # Enter isDev block
        case "$trimmed" in
            if\ \(isDev\)*\{*) inside_isDev_block=1 ;;
        esac

        # --- Multi-line console.log handling ---
        if [ $inside_console_log -eq 1 ]; then
            console_buffer="$console_buffer $trimmed"
            # End of multi-line log detected by semicolon
            [[ "$trimmed" == *\; ]] && {
                # Skip if inside isDev block or guarded
                [[ "$console_buffer" =~ ^isDev[[:space:]]*&& ]] && inside_console_log=0 && console_buffer="" && continue
                [[ "$console_buffer" =~ ^if[[:space:]]*\(\s*isDev\s*\) ]] && inside_console_log=0 && console_buffer="" && continue
                [ $inside_isDev_block -eq 1 ] && inside_console_log=0 && console_buffer="" && continue

                invalid_logs="$invalid_logs\n$file:$console_start_line: ${console_buffer}"
                inside_console_log=0
                console_buffer=""
            }
            continue
        fi

        # --- Detect console call start ---
        [[ "$trimmed" == *console.*\(* ]] || continue
        # Guard patterns on same line
        [[ "$trimmed" =~ ^if[[:space:]]*\(\s*isDev\s*\).*console\.(log|warn|error).* ]] && continue
        [[ "$trimmed" =~ ^isDev[[:space:]]*&&.*console\.(log|warn|error).* ]] && continue
        [ $inside_isDev_block -eq 1 ] && continue

        # Check if multi-line or single-line
        if [[ "$trimmed" == *\; ]]; then
            invalid_logs="$invalid_logs\n$file:$lineno: $trimmed"
        else
            inside_console_log=1
            console_buffer="$trimmed"
            console_start_line=$lineno
        fi

    done < "$tmpfile"

    rm -f "$tmpfile"
done

END_TIME=$(date +%s%N)
ELAPSED_MS=$(( (END_TIME - START_TIME)/1000000 ))

if [ -n "$invalid_logs" ]; then
    echo "❌ Found unguarded console.log statements in staged files:"
    echo -e "$invalid_logs" | sed 's/^/  • /'
    echo "⏳ Script execution time: ${ELAPSED_MS} ms"
    exit 1
fi

echo "✅ All checks passed. Push allowed."
echo "⏳ Script execution time: ${ELAPSED_MS} ms"
exit 0
