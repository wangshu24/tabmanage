#!/bin/sh
# pre-push hook
# Blocks console.log unless guarded by isDev
# Ignores env file where isDevBuild() is defined
# Tracks execution time

START_TIME=$(date +%s%N)

IGNORE_FILE="scripts/shared/devTool.js"  # adjust to your file path
FILES=$(git ls-files '*.js' | grep -v "$IGNORE_FILE")

invalid_logs=""

for file in $FILES; do
    lineno=0
    inside_isDev_block=0
    block_depth=0

    while IFS= read -r line || [ -n "$line" ]; do
        lineno=$((lineno+1))
        trimmed="${line#"${line%%[![:space:]]*}"}"  # trim leading whitespace

        # Update block depth for { } tracking
        opens=$(awk -F"{" '{print NF-1}' <<< "$line")
        closes=$(awk -F"}" '{print NF-1}' <<< "$line")
        block_depth=$((block_depth + opens - closes))

        # Enter or leave isDev blocks
        case "$trimmed" in
            if\ \(isDev\)*\{*) inside_isDev_block=1 ;;
        esac
        [ $block_depth -le 0 ] && inside_isDev_block=0

        # Skip if line is properly guarded
        case "$trimmed" in
            if\ \(isDev\)*console.log*) continue ;;
            isDev\ \&\&*console.log*) continue ;;
        esac
        [ $inside_isDev_block -eq 1 ] && continue

        # Detect console.log
        case "$trimmed" in
            *console.log*) invalid_logs="$invalid_logs\n$file:$lineno: $trimmed" ;;
        esac

    done < "$file"
done

END_TIME=$(date +%s%N)
ELAPSED_MS=$(( (END_TIME - START_TIME)/1000000 ))

if [ -n "$invalid_logs" ]; then
    echo "❌ Found unguarded console.log statements:"
    echo -e "$invalid_logs" | sed 's/^/  • /'
    echo "⏳ Script execution time: ${ELAPSED_MS} ms"
    exit 1
fi

echo "✅ All checks passed. Push allowed."
echo "⏳ Script execution time: ${ELAPSED_MS} ms"
exit 0
