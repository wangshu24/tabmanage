#!/bin/sh
# pre-push hook (optimized, multi-line aware)
# Blocks console.log unless guarded by isDev
# Ignores env file where isDevBuild() is defined
# Tracks execution time and prints human-readable logs

START_TIME=$(date +%s%N)   # nanoseconds

IGNORE_FILE="src/env.js"

# Only staged JS files
FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$' | grep -v "$IGNORE_FILE")

invalid_logs=""

for file in $FILES; do
    lineno=0
    inside_isDev_block=0
    block_depth=0
    inside_console_log=0
    console_buffer=""

    while IFS= read -r line || [ -n "$line" ]; do
        lineno=$((lineno+1))
        trimmed="${line#"${line%%[![:space:]]*}"}"  # trim leading spaces

        # Track block depth
        opens=$(awk -F"{" '{print NF-1}' <<< "$line")
        closes=$(awk -F"}" '{print NF-1}' <<< "$line")
        block_depth=$((block_depth + opens - closes))

        # Enter/exit isDev blocks
        case "$trimmed" in
            if\ \(isDev\)*\{*) inside_isDev_block=1 ;;
        esac
        [ $block_depth -le 0 ] && inside_isDev_block=0

        # Detect start of console.log
        if [ $inside_console_log -eq 0 ]; then
            case "$trimmed" in
                *console.log*) 
                    # Check if this line ends with ';' -> single-line log
                    if [[ "$trimmed" == *\; ]]; then
                        # Single-line console.log
                        # Skip if properly guarded
                        [[ "$trimmed" == "if (isDev)"* ]] && continue
                        [[ "$trimmed" == "isDev &&"* ]] && continue
                        [ $inside_isDev_block -eq 1 ] && continue
                        invalid_logs="$invalid_logs\n$file:$lineno: ${trimmed}"
                        continue
                    else
                        # Multi-line console.log start
                        inside_console_log=1
                        console_start_line=$lineno
                        console_buffer="$trimmed"
                        continue
                    fi
                    ;;
            esac
        else
            # We are inside multi-line console.log
            console_buffer="$console_buffer $trimmed"
            # End of multi-line log
            if [[ "$trimmed" == *\; ]]; then
                # Skip if inside isDev
                [ $inside_isDev_block -eq 1 ] && inside_console_log=0 && console_buffer="" && continue
                if [[ "$console_buffer" == "isDev &&"* ]] || [[ "$console_buffer" == "if (isDev)"* ]]; then
                    inside_console_log=0
                    console_buffer=""
                    continue
                fi
                invalid_logs="$invalid_logs\n$file:$console_start_line: ${console_buffer}"
                inside_console_log=0
                console_buffer=""
            fi
        fi

    done < "$file"
done

END_TIME=$(date +%s%N)
ELAPSED_MS=$(( (END_TIME - START_TIME)/1000000 ))

# Print results
if [ -n "$invalid_logs" ]; then
    echo "❌ Found unguarded console.log statements:"
    # Print each log entry prefixed with a bullet for readability
    echo -e "$invalid_logs" | sed 's/^/  • /'
    echo "⏱ Script execution time: ${ELAPSED_MS} ms"
    exit 1
fi

echo "✅ All checks passed. Push allowed."
echo "⏳ Script execution time: ${ELAPSED_MS} ms"
exit 0
