#!/bin/sh
# pre-push hook
# Blocks console.log unless guarded by isDev
# Ignores env file where isDevBuild() is defined

IGNORE_FILE="scripts\shared\devTool.js"  # adjust to your file path
FILES=$(git ls-files '*.js' | grep -v "$IGNORE_FILE")

invalid_logs=""

for file in $FILES; do
    lineno=0
    inside_isDev_block=0
    block_depth=0

    # Read file line by line
    while IFS= read -r line || [ -n "$line" ]; do
        lineno=$((lineno+1))

        # Update block depth for { } tracking
        opens=$(echo "$line" | grep -o "{" | wc -l)
        closes=$(echo "$line" | grep -o "}" | wc -l)
        block_depth=$((block_depth + opens - closes))

        # Enter or leave isDev blocks
        echo "$line" | grep -Eq '^\s*if\s*\(\s*isDev\s*\)\s*{?' && inside_isDev_block=1
        if [ $block_depth -le 0 ]; then inside_isDev_block=0; fi

        # Skip if line is properly guarded
        echo "$line" | grep -Eq '^\s*if\s*\(\s*isDev\s*\)\s*console\.log' && continue
        echo "$line" | grep -Eq '^\s*isDev\s*&&\s*console\.log' && continue
        [ $inside_isDev_block -eq 1 ] && continue

        # Detect console.log (simple version, handles multi-line by checking start)
        echo "$line" | grep -q "console\.log" || continue

        # Report line number and content
        invalid_logs="$invalid_logs\n$file:$lineno: $line"
    done < "$file"
done

if [ -n "$invalid_logs" ]; then
    echo "❌ Found unguarded console.log statements:"
    echo -e "$invalid_logs"
    exit 1
fi

echo "✅ All checks passed. Push allowed."
exit 0